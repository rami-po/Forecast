#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('angular2-nodejs:server');
var http = require('http');

var cache = require('../routes/serverTools/cache.js').serverCache;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket connection from client
io.on('connect', (socket) => {
  // console.log('new socket connection: ' + socket.id + ' ' + Object.keys(io.sockets.connected).length + ' socket IDs');

  socket.on('disconnect', function() {
    console.log('disconnect socket id ' + socket.id);
  });

  socket.on('userUpdatedRollUps', function (data) {
    console.log('send an update roll ups message to everyone:'); console.log(data);
    // console.log('cache:'); console.log(cache.keys());
    io.emit('updateRollUps', data);
  });

  socket.on('broadcastUpdatedRollUps', function (data) {
    console.log('broadcast an update roll ups message to everyone but the originator:'); console.log(data);
    // console.log('cache:'); console.log(cache.keys());
    socket.broadcast.emit('updateRollUps', data);
  });

  socket.on('sendUserUpdate', function (data) {
    console.log('send an update to everyone:'); console.log(data);
    // console.log('cache:'); console.log(cache.keys());
    io.emit('updateMessage', data);
  });

  socket.on('broadcastUserUpdate', function (data) {
    console.log('send an update message to everyone but the originator:'); console.log(data);
    // console.log('cache:'); console.log(cache.keys());
    socket.broadcast.emit('updateMessage', data);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
